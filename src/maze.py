import random
import time
import os


class Maze:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞.

    :param width: –®–∏—Ä–∏–Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞.
    :param height: –í—ã—Å–æ—Ç–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞.
    :param generator: –ö–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞.
    """

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã: 0 - –ø—Ä–æ—Ö–æ–¥, 1 - —Å—Ç–µ–Ω–∞, 2 - –º–æ–Ω–µ—Ç–∫–∞, 3 - –ø–µ—Å–æ–∫
    def __init__(self, width, height, generator=None, surfaces=False):
        if width < 3 or height < 3:
            raise ValueError("–®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 3.")
        self.width = width
        self.height = height
        self.grid = [[1 for _ in range(width)] for _ in range(height)]
        self.surfaces = surfaces
        self.coins_collected = 0  # –°—á—ë—Ç—á–∏–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
        if generator:
            self.generator = generator(self)
        else:
            self.generator = None
        self.start = None
        self.end = None

    def generate(self):
        """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞."""
        self.generator.generate()

    def generate_surfaces(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç–æ–∫ –∏ –ø–µ—Å–∫–∞, –µ—Å–ª–∏ surfaces=True."""
        if not self.surfaces:
            return
        for y in range(self.height):
            for x in range(self.width):
                if self.grid[y][x] == 0:
                    if random.random() < 0.1:  # 10% —à–∞–Ω—Å –º–æ–Ω–µ—Ç–∫–∏
                        self.grid[y][x] = 2
                    elif random.random() < 0.05:  # 5% —à–∞–Ω—Å –ø–µ—Å–∫–∞
                        self.grid[y][x] = 3

    def display(self, path=None, current=None):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É—Ç–∏ –∏ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.

        :param path: –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—É—Ç–∏, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø—É—Ç—å –±—ã–ª –Ω–∞–π–¥–µ–Ω.
        :param current: –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.
        """
        os.system('cls' if os.name == 'nt' else 'clear')
        for y in range(self.height):
            for x in range(self.width):
                if (x, y) == self.start:
                    print("üöÄ  ", end='')
                elif (x, y) == self.end:
                    print("üèÅ  ", end='')
                elif current and (x, y) == current:
                    print("üë£  ", end='')
                elif path and (x, y) in path:
                    print("üåü  ", end='')
                else:
                    cell = self.grid[y][x]
                    print({
                              1: "‚ñà‚ñà  ",  # —Å—Ç–µ–Ω–∞
                              0: "    ",  # –ø—Ä–æ—Ö–æ–¥
                              2: "üí∞  ",  # –º–æ–Ω–µ—Ç–∫–∞
                              3: "üåµ  "  # –ø–µ—Å–æ–∫
                          }.get(cell, "??  "), end='')  # –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–Ω–µ—Ç–æ–∫ –∏ –ø–µ—Å–∫–∞
            print()
        time.sleep(0.2)

    def set_start_end(self, start, end):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–µ–∫ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ –¥–ª—è –æ–±—Ö–æ–¥–∞.

        :param start: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏.
        :param end: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏.
        :raises ValueError: –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞.
        """
        if not (0 <= start[0] < self.width and 0 <= start[1] < self.height):
            raise ValueError("–ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞")
        if not (0 <= end[0] < self.width and 0 <= end[1] < self.height):
            raise ValueError("–ö–æ–Ω–µ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞")

        self.start = start
        self.end = end

    # –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ–±–Ω—É–ª–∏—Ç—å)
    def reset_coins(self):
        self.coins_collected = 0
